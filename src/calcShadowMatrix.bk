function[shadowMatrix, shadowDepthMatrix, solarFluxMatrix] = calcShadowMatrix(solarIncidenceAngle, solarAzimuth, simDir)
% This function calculates BOTH the shadow function AND the resulting
% insolation map on the surface.

	% Load configuration files and assign variables:
	load([simDir, '/config/bin/settings.mat']);	
	load([settings.dirPath.config, 'bin/constants.mat']);
	load([settings.dirPath.config, 'bin/physProp.mat']);
	load([settings.dirPath.config, 'bin/mapProp.mat']);
	
% Quit the script if there is already a solar flux matrix for the current timestep:
	if exist([settings.dirPath.output, 'Shadow/solarFluxMatrix_', num2str(solarAzimuth), '_', num2str(solarIncidenceAngle) ,'.mat'], 'file')
		writeToLog(['Solar flux map for incidence ', num2str(solarIncidenceAngle), ' and azimuth ', num2str(solarAzimuth), ' already exists.'], true);
		return;
	end

	% Loading the topography:
	load([settings.dirPath.input,'Z.mat']);

	% Initialize the shadow matrix:
	shadowMatrix = zeros(size(Z));
	shadowDepthMatrix = zeros(size(Z));

	% Else, continue calculating the shadow matrix:
	
	[X,Y] = meshgrid(-fix((length(Z) / 2)):fix((length(Z) / 2)), -fix((length(Z) / 2)):fix((length(Z) / 2

	% Slopes and aspect:
	[dX, dY] = gradient(Z);
	[THETA, R] = cart2pol(dX, dY);
	slopeField = atand(R);
	slopeAspectField = - 180 + radtodeg(THETA);

	%% More calculations:
	azimuthAngleQuadrant = mod(floor([solarAzimuth]/90), 4) + 1;

	%%
	%
	%  Beginning of the ray casting model:
	%

	%%  Calculating the solar shading matrix:
	%   Addition is the scalar that will be added to the X,Y
	%   matrices, in order to conform them with matlab's indexing
	%   method.
    addition = ceil(length(X) / 2);

	writeToLog(['Calculating shadow matrix for Zenith angle ', num2str(solarIncidenceAngle), ' and azimuth ', num2str(solarAzimuth),'.']);
	% Iterate over all the facets in the Z grid, and check which
	% one is hidden from the sun:
	for facetLinearIndex = 1:numel(Z)
		% Calculating the linear function y = tan(theta) * x + b
	    	% that is passing through all the grid facets in the
    		% direction of the sun.
    
   		if (mod(facetLinearIndex,100) == 0)
        	progressBar = [num2str(facetLinearIndex/numel(Z) * 100), ' %'];
        	fprintf(progressBar);
        	fprintf(repmat('\b',1,length(progressBar)-1));       
    	end
    
    		if ((solarAzimuth < 315 & solarAzimuth > 225) | (solarAzimuth < 135 & solarAzimuth > 45))
        	%% If the angle is close to pi/2 or 3pi/2.
                if (solarAzimuth < 90)
                    bufLow = -1; bufHi = 0; 
                elseif (solarAzimuth == 90)
                    bufLow = 0; bufHi = 0;
                elseif (solarAzimuth > 90)
                    bufLow = 0; bufHi = 1;
                end
		        if (solarAzimuth == 90 || solarAzimuth == 270)
		            y = Y(:,1)';
		            x = X(facetLinearIndex) * ones(1,length(y));
		        else
		            y = Y(:,1)';
		            x = X(facetLinearIndex) + (y - Y(facetLinearIndex)) / tand(solarAzimuth);
                end
                
                %   1. Arrangin in a vector:
		        v = [x;y]';
%         
		        %   2. Rounding values to fit the grid spacing (which are integers...).
		        V = round( v);
        
	        	%   Removing all the facets that aren't in the direction of
		        %   the sun:
		        if azimuthAngleQuadrant == 3 || azimuthAngleQuadrant == 4
		            V(V(:,2) > Y(facetLinearIndex), :) = [];
		        else
		            V(V(:,2) < Y(facetLinearIndex), :) = [];
                end
	    
            else
                if (solarAzimuth < 90)
                    bufLow = -1; bufHi = 0; 
                elseif (solarAzimuth == 90)
                    bufLow = 0; bufHi = 0;
                elseif (solarAzimuth > 90)
                    bufLow = -1; bufHi = -1;
                end
	        	%%  If the angle is not close to pi/2 or 3pi/2.
			        x = X(1,:);
			        y = tand(solarAzimuth)*(x - X(facetLinearIndex)) + Y(facetLinearIndex);
        
		        %   Fixing y to match the grid:
 		        %   1. Arrangin in a vector:
		        v = [x;y]';
        
		        %   2. Rounding values to fit the grid spacing (which are integers...).
		        V = round( v);
        
		        %   Removing all the facets that aren't in the direction of the sun:
		        if azimuthAngleQuadrant == 1 || azimuthAngleQuadrant == 4
		            V(V(:,1) < X(facetLinearIndex), :) = [];
		        else
		            V(V(:,1) > X(facetLinearIndex), :) = [];
                end
	    end
    
	    %   setting the grid to be 1-indexed :
	    V = V + addition; 
        
        %   Removing valueso  the grid:
        V(V(:,1) > mapProp.mapSize | V(:,2) > mapProp.mapSize) = NaN;
        V(V(:,1) < 1 | V(:,2) < 1) = NaN;
        
        %   Removing the NaN values:
        V(isnan(V),:) = [];
        
	    %   zVector is the vector of Z(X,Y) on the line connecting the examined
	    %   facet to the sun.
	    zVector = Z(sub2ind(size(Z), V(:,2), V(:,1)));
    
	    %   And Finally, calculating the slope:
	    heightDiffVector = zVector - Z(facetLinearIndex);

	    distanceVector = sqrt((Y(facetLinearIndex) + addition - V(:,2)).^2 + (X(facetLinearIndex) + addition - V(:,1)).^2);
	    slopeTangentToOtherPoint = heightDiffVector ./ distanceVector;
    	logicalSlopeComparison = slopeTangentToOtherPoint(1:end) >= tand(90 - solarIncidenceAngle);
        
    	% Start comparing the slope tangent to other point vector from the 3rd place, since
        % the first index is the facet and the second index is the closest facet
        % in order to prevent discretization errors.
	    if any(logicalSlopeComparison)
	        shadowMatrix(facetLinearIndex) = true;
            
            % Create a vector of all facets casting a shadow on the facet
            % of interest.
            whoShadowed = logicalSlopeComparison .* zVector;
            whoShadowed(whoShadowed == 0) = NaN;
            [maxZ, maxX] = max(whoShadowed);
            
            % Set the reference plane as the mean of the 1D profile:
            z0 = mean(zVector);
            shadowDepthMatrix(facetLinearIndex) = (maxZ - z0) - (Z(facetLinearIndex) - z0) - distanceVector(maxX) .* cotd(solarIncidenceAngle);
            true;
        else
            shadowMatrix(facetLinearIndex) = false;
            shadowDepthMatrix(facetLinearIndex) = 0;
	    end
    end

	%% Solar flux matrix:
		%  Creating the matrix of angle of incidence:
		cosIncidenceMatrix = cosd(solarIncidenceAngle) .* cosd(slopeField) + sind(solarIncidenceAngle).* sind(slopeField) .* cosd(solarAzimuth - slopeAspectField);
	
		solarFluxMatrix = (constants.earthSolarConstant ./ settings.finiteSunArea )./ physProp.distanceFromSun.^2 .* cosIncidenceMatrix .* ~(shadowMatrix);
	
		%  Removing values lower than zero (due to negative incidence angle).
		solarFluxMatrix(solarFluxMatrix < 0) = 0;
return;
end

